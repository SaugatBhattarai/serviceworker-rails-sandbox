import {cacheKey} from 'utils/caching';
import Logger from 'utils/logger';
const logger = new Logger('[offline-fallback/serviceworker]');

function cacheOfflineResources() {
  logger.log('install event started.');

  return caches
    .open(cacheKey('offline'))
    .then((cache) => cache.addAll([
      "/pages/offline-fallback/offline",
      "<%= asset_path 'pics/cash-cat.jpg' %>",
      "<%= asset_path 'application.css' %>"
    ]))
    .then(() => {
      logger.log('installation event complete!');
    });
}

function fetchOrOffline(request) {
  logger.log('fetch event started', request.url);

  if (request.method !== 'GET') { return; }

  return fetch(request)
    .catch((error) => {
      logger.error('fetch failed, falling back to offline response in cache', error);
      return offlineResponse(request);
    });
}

function offlineResponse(request) {
  let match;
  if (request.headers.get('accept').includes('text/html')) {
    match = '/pages/offline-fallback/offline';
  } else {
    match = request;
  }

  return caches.open(cacheKey('offline')).then((cache) => cache.match(match))
}

self.addEventListener('install', function onInstall(event) {
  event.waitUntil(cacheOfflineResources());
});

self.addEventListener('fetch', function onFetch(event) {
  let request = event.request;

  if (request.method !== 'GET') { return; }

  event.respondWith(fetchOrOffline(request));
});
